@using Jatan.Models
@using JatanWebApp.Helpers
@using JatanWebApp.Models.ViewModels
@model PostGameViewModel
@{
    ViewBag.Title = "Postgame";

    string jsonDiceRollList = Model.Stats.DiceRolls.Values.JsonEscape();
    List<Player> playerList = Model.Stats.AverageTurnLengths.Keys.ToList();
    List<string> playerNameList = Model.Stats.AverageTurnLengths.Keys.Select(p => p.Name.JsonEscape(true)).ToList();
    string jsonAverageTurnLengthList = Model.Stats.AverageTurnLengths.Values.Select(t => t.TotalSeconds).JsonEscape();
    List<string> playerColorListDark = Model.Stats.AverageTurnLengths.Keys.Select(p => p.Color.ToCssColor(0.9f)).ToList();
    List<string> playerColorListLight = Model.Stats.AverageTurnLengths.Keys.Select(p => p.Color.ToCssColor(0.5f)).ToList();

    int[] turnIndexArray = new int[Model.Stats.TotalTurnCount];
    for (int i = 0; i < Model.Stats.TotalTurnCount; i++)
    {
        turnIndexArray[i] = i;
    }
    string jsonTurnDataPoints = turnIndexArray.JsonEscape();
 
}

<div class="container body-content">
    <h1>@Model.GameName</h1>
    <p>
        @Html.ActionLink("Return to game board", "Instance", new {gameId = Model.GameUid})
    </p>
    <div class="container">
        <ul class="list-group col-sm-8">
            <li class="list-group-item list-group-item-info">
                Winner
                <span class="badge">@Model.Stats.WinnerName</span>
            </li>
            <li class="list-group-item list-group-item-info">
                Game length
                <span class="badge">@Model.Stats.GameLength.ToReadableString()</span>
            </li>
            <li class="list-group-item list-group-item-info">
                Number of turns
                <span class="badge">@Model.Stats.TotalTurnCount</span>
            </li>
        </ul>
    </div>
    <div class="chart-div">
        <canvas id="resCanvas" class="chart-canvas" width="600" height="300"></canvas>
    </div>
    <div class="btn-group postgame-btn-group" role="group" aria-label="">
        <button id="btnTotal" type="button" class="btn btn-default">Total</button>
        <button id="btnWood" type="button" class="btn btn-default"><span class="res-icon-small res-icon-wood"></span> Wood</button>
        <button id="btnBrick" type="button" class="btn btn-default"><span class="res-icon-small res-icon-brick"></span> Brick</button>
        <button id="btnWheat" type="button" class="btn btn-default"><span class="res-icon-small res-icon-wheat"></span> Wheat</button>
        <button id="btnSheep" type="button" class="btn btn-default"><span class="res-icon-small res-icon-sheep"></span> Sheep</button>
        <button id="btnOre" type="button" class="btn btn-default"><span class="res-icon-small res-icon-ore"></span> Ore</button>
    </div>
    
    <div class="chart-div"><canvas id="diceCanvas" class="chart-canvas" width="600" height="300"></canvas></div>
    <div class="chart-div"><canvas id="turnCanvas" class="chart-canvas" width="600" height="300"></canvas></div>
</div>

@section scripts
{
    <script src="~/Scripts/Chart.min.js"></script>
    <script type="text/javascript">

        $(function() {

            $("#btnTotal").click(function () { populateResChart("Total", _resDatasetsTotal); });
            $("#btnBrick").click(function () { populateResChart("Brick", _resDatasetsBrick); });
            $("#btnWood").click(function () { populateResChart("Wood", _resDatasetsWood); });
            $("#btnWheat").click(function () { populateResChart("Wheat", _resDatasetsWheat); });
            $("#btnSheep").click(function () { populateResChart("Sheep", _resDatasetsSheep); });
            $("#btnOre").click(function () { populateResChart("Ore", _resDatasetsOre); });

            populateResChart("Total", _resDatasetsTotal);
            populateDiceChart();
            populateTurnChart();
        });

        var _resDatasetsTotal = [
        @foreach (var player in playerList)
        {
            @:{
                @:label: "@player.Name.JsonEscape(true)",
                @:borderColor: "@player.Color.ToCssColor(1)",
                @:backgroundColor: "@player.Color.ToCssColor(0.05f)",
                @:data: @Model.Stats.CardsCollected[player][ResourceTypes.None].JsonEscape(),
                @:fill: true, lineTension: 0
            @:},
        }
        ];
        var _resDatasetsWood = [
        @foreach (var player in playerList)
        {
            @:{
                @:label: "@player.Name.JsonEscape(true)",
                @:borderColor: "@player.Color.ToCssColor(1)",
                @:backgroundColor: "@player.Color.ToCssColor(0.05f)",
                @:data: @Model.Stats.CardsCollected[player][ResourceTypes.Wood].JsonEscape(),
                @:fill: true, lineTension: 0
            @:},
        }
        ];
        var _resDatasetsBrick = [
        @foreach (var player in playerList)
        {
            @:{
                @:label: "@player.Name.JsonEscape(true)",
                @:borderColor: "@player.Color.ToCssColor(1)",
                @:backgroundColor: "@player.Color.ToCssColor(0.05f)",
                @:data: @Model.Stats.CardsCollected[player][ResourceTypes.Brick].JsonEscape(),
                @:fill: true, lineTension: 0
            @:},
        }
        ];
        var _resDatasetsWheat = [
        @foreach (var player in playerList)
        {
            @:{
                @:label: "@player.Name.JsonEscape(true)",
                @:borderColor: "@player.Color.ToCssColor(1)",
                @:backgroundColor: "@player.Color.ToCssColor(0.05f)",
                @:data: @Model.Stats.CardsCollected[player][ResourceTypes.Wheat].JsonEscape(),
                @:fill: true, lineTension: 0
            @:},
        }
        ];
        var _resDatasetsSheep = [
        @foreach (var player in playerList)
        {
            @:{
                @:label: "@player.Name.JsonEscape(true)",
                @:borderColor: "@player.Color.ToCssColor(1)",
                @:backgroundColor: "@player.Color.ToCssColor(0.05f)",
                @:data: @Model.Stats.CardsCollected[player][ResourceTypes.Sheep].JsonEscape(),
                @:fill: true, lineTension: 0
            @:},
        }
        ];
        var _resDatasetsOre = [
        @foreach (var player in playerList)
        {
            @:{
                @:label: "@player.Name.JsonEscape(true)",
                @:borderColor: "@player.Color.ToCssColor(1)",
                @:backgroundColor: "@player.Color.ToCssColor(0.05f)",
                @:data: @Model.Stats.CardsCollected[player][ResourceTypes.Ore].JsonEscape(),
                @:fill: true, lineTension: 0
            @:},
        }
        ];

        function populateResChart(name, datasets) {
            $(".btn").removeClass("active");
            $("#btn" + name).addClass("active");
            var resCanvas = $("#resCanvas");

            var data =
            {
                labels: @jsonTurnDataPoints,
                datasets: datasets
            };
            var options = {
                events: [],
                responsive: true,
                title: { display: true, text: "Resource Cards Collected (" + name + ")" },
                elements: { point: { radius: 0 } },
                tooltips: { enabled: false },
                scales: {
                    xAxes: [{ display: true, scaleLabel: { display: true, labelString: "Turn #" }, ticks: { autoSkip: true, maxTicksLimit: 20 } }],
                    yAxes: [
                        {
                            display: true,
                            scaleLabel: { display: true, labelString: "Cards Collected" },
                            ticks: { suggestedMin: 0 }
                        }
                    ]
                }
            };
            var chart = new Chart(resCanvas, { type: "line", data: data, options: options });
        }

        function populateDiceChart() {
            var diceCanvas = $("#diceCanvas");
            var data =
            {
                labels: ["2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
                datasets: [
                    {
                        label: "# Times Rolled",
                        data: @jsonDiceRollList,
                        borderWidth: 1,
                        backgroundColor: "rgba(0,0,0,0.4)",
                        borderColor: "rgba(0,0,0,0.7)"
                    }
                ]
            };
            var options = {
                legend: { display: false },
                responsive: true,
                title: { display: true, text: "Dice Roll Frequency" },
                scales: {
                    xAxes: [{ display: true, scaleLabel: { display: true } }],
                    yAxes: [
                        {
                            display: true,
                            scaleLabel: { display: true, labelString: "# Times Rolled" },
                            ticks: { suggestedMin: 0 }
                        }
                    ]
                }
            };
            var chart = new Chart(diceCanvas, { type: "bar", data: data, options: options });
        }

        function populateTurnChart() {
            var turnCanvas = $("#turnCanvas");
            var labels = [ @foreach (var name in playerNameList)
                           {
                               @:"@name",
                           }
            ];
            var bgColors = [ @foreach (var color in playerColorListLight)
                             {
                                 @:"@color",
                             }
            ];
            var borderColors = [ @foreach (var color in playerColorListDark)
                                 {
                                     @:"@color",
                                 }
            ];
            var dataSets = [{ label: "Average Turn Length (seconds)", data: @jsonAverageTurnLengthList, borderWidth: 1, backgroundColor: bgColors, borderColor: borderColors }];
            var data = { labels: labels, datasets: dataSets };
            var options = {
                legend: { display: false },
                responsive: true,
                title: { display: true, text: "Average Turn Length" },
                scales: {
                    xAxes: [{ display: true, scaleLabel: { display: true } }],
                    yAxes: [
                        {
                            display: true,
                            scaleLabel: { display: true, labelString: "Seconds" },
                            ticks: { suggestedMin: 0 }
                        }
                    ]
                }
            };
            var chart = new Chart(turnCanvas, { type: "bar", data: data, options: options });
        }
    </script>
}
